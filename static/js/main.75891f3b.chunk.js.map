{"version":3,"sources":["ScatterPlot.js","ScatterPlotComponent.js","Sections.js","App.js","serviceWorker.js","index.js"],"names":["ScatterPlot","fixedXMax","fixedXMin","fixedYMax","fixedYMin","height","width","window","innerWidth","xScale","d3","yScale","xTitle","yTitle","xSwarm","onDrag","hideXAxis","hideYAxis","showThreshold","showCircles","showPath","colorScale","d","color","radius","margin","left","bottom","top","right","delay","x","pack","packGroup","packValue","yFormat","chartData","dragstarted","dragged","invert","y","domain","dragended","this","classed","chart","selection","chartHeight","chartWidth","each","data","ele","gEnter","selectAll","attr","enter","append","style","xAxis","yAxis","tip","d3tip","offset","html","select","call","xMax","scatter","xMin","range","yMin","yMax","scale","tickFormat","transition","duration","text","size","packer","nestedData","key","entries","root","values","sum","descendants","filter","depth","map","id","r","container","shift","tmp","swarm","simulation","force","strength","stop","i","tick","circles","merge","exit","remove","rectData","horizontalLine","rects","lineData","line","on","path","pathData","sort","a","b","paths","value","arguments","length","ScatterPlotComponent","update","scatterData","JSON","parse","stringify","props","swarmData","settings","hideXAxix","console","log","axisLimits","datum","slice","threshold","_this","react_default","createElement","className","marginLeft","ref","node","Component","defaultProps","innerHeight","title","selected","fill","Sections","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","toFixed","sectionNumber","target","href","react_tex","texContent","accuracy","onMouseEnter","onMouseLeave","sensitivity","specificity","styles","ReactGA","require","FontAwesome","React","Scroll","Link","Element","DirectLink","Events","scrollSpy","animateScroll","scroller","elementList","name","App","onResize","updateDimensions","bind","assertThisInitialized","updateThreshold","setFilter","state","dataStep","allData","typeFilter","allLineData","scatterSettings","initialize","set","page","location","pathname","search","pageview","document","scrollEvent","register","addEventListener","error","formatted","worst_concave_points","logistic_preds","outcome","random","Math","dims","getDimensions","setState","rawData","randomData","formattedData","fpr","tpr","rocData","_this2","reduce","total","_this3","posCases","_this4","negCases","wrapper","getElementById","fullWidth","offsetWidth","fraction","sectionWidth","removeEventListener","to","_this5","_this6","computeAccuracy","getData","nextIndex","scrollNext","scrollTo","smooth","icon","sectionStyle","activeClass","onSetActive","handleSetActive","spy","onClick","src_ScatterPlotComponent","getAxisLimits","getXTitle","getCircleVisibility","getPathVisibility","getYTitle","src_Sections_0","computeSensitivity","computeSpecificity","Boolean","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.75891f3b.chunk.js","sourcesContent":["// ScatterPlot\nimport * as d3 from 'd3';\nimport d3tip from 'd3-tip';\n\nlet ScatterPlot = function () {\n    // Set default values\n    let height = 500,\n        width = window.innerWidth * .7,\n        xScale = d3.scaleLinear(),\n        yScale = d3.scaleLinear(),\n        xTitle = 'X Axis Title',\n        yTitle = 'Y Axis Title',\n        xSwarm = false,\n        duration = 1000,\n        onDrag = () => false,\n        hideXAxis = false,\n        hideYAxis = false,\n        showThreshold = false,\n        showCircles = true,\n        showPath = false,\n        colorScale = (d) => d.color || 'green',\n        radius = (d) => 6,\n        margin = {\n            left: 70,\n            bottom: 50,\n            top: 0,\n            right: 50\n        },\n        delay = (d) => xScale(d.x) * 5,\n        pack = false,\n        packGroup = 'group',\n        packValue = 'y',\n        yFormat = (d) => d3.format(\".1\")(+d),\n        chartData = [],\n        fixedXMax,\n        fixedXMin,\n        fixedYMax,\n        fixedYMin;\n\n    // Dragging function\n    function dragstarted(d) {\n        // d3.select(this).raise().classed(\"active\", true);\n    }\n\n    function dragged(d) {\n        // d3.select(this).attr(\"y1\", d3.event.y).attr(\"y2\", d3.event.y);\n        if (yScale.invert(d3.event.y) < yScale.domain()[0] | yScale.invert(d3.event.y) > yScale.domain()[1]) return;\n        onDrag(yScale.invert(d3.event.y))\n    }\n\n    function dragended(d) {\n        d3.select(this).classed(\"active\", false);\n    }\n    // Function returned by ScatterPlot\n    let chart = function (selection) {\n        // Height/width of the drawing area itself\n        let chartHeight = height - margin.bottom - margin.top;\n        let chartWidth = width - margin.left - margin.right;\n\n        // Iterate through selections, in case there are multiple\n        selection.each(function (data) {\n            // Use the data-join to create the svg (if necessary)\n            let ele = d3.select(this);\n            let svg = ele\n                .selectAll(\"svg\")\n                .attr('width', width)\n                .attr(\"height\", height)\n                .data([data]);\n\n            // Append static elements (i.e., only added once)\n            let gEnter = svg\n                .enter()\n                .append(\"svg\")\n                .append(\"g\");\n\n            // g element for markers\n            gEnter\n                .append('g')\n                .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')\n                .attr('height', chartHeight)\n                .attr('width', chartWidth)\n                .attr('class', 'chartG');\n\n            // Append axes to the gEnter element\n            gEnter\n                .append('g')\n                .attr('transform', 'translate(' + margin.left + ',' + (chartHeight + margin.top) + ')')\n                .attr('class', 'axis x')\n                .style('opacity', hideXAxis == true\n                    ? 0\n                    : 1);\n\n            gEnter\n                .append('g')\n                .attr('class', 'axis y')\n                .attr('transform', 'translate(' + margin.left + ',' + (margin.top) + ')')\n                .style('opacity', hideYAxis == true\n                    ? 0\n                    : 1);\n\n            // Add a title g for the x axis\n            gEnter\n                .append('text')\n                .attr('transform', 'translate(' + (margin.left + chartWidth / 2) + ',' + (chartHeight + margin.top + 40) + ')')\n                .attr('class', 'title x')\n                .style('opacity', hideXAxis == true\n                    ? 0\n                    : 1);\n\n            // Add a title g for the y axis\n            gEnter\n                .append('text')\n                .attr('transform', 'translate(' + (margin.left - 50) + ',' + (margin.top + chartHeight / 2) + ') rotate(-90)')\n                .attr('class', 'title y')\n                .style('opacity', hideYAxis == true\n                    ? 0\n                    : 1);\n\n            // Define xAxis and yAxis functions\n            let xAxis = d3.axisBottom();\n            let yAxis = d3.axisLeft();\n\n            // // Define a hover\n            let tip = d3tip()\n                .attr('class', 'd3-tip')\n                .offset([-10, 0])\n                .html(function (d) {\n                    return \"<strong>\" + d.color + \"</strong>\";\n                });\n\n            ele\n                .select('svg')\n                .call(tip);\n\n            // Calculate x and y scales\n            let xMax = fixedXMax || d3.max(data.scatter, (d) => + d.x) * 1.05;\n            let xMin = fixedXMin || d3.min(data.scatter, (d) => + d.x) - xMax / 15;\n            xScale\n                .range([0, chartWidth])\n                .domain([xMin, xMax]);\n\n            let yMin = fixedYMin || d3.min(data.scatter, (d) => + d.y) * .95;\n            let yMax = fixedYMax || d3.max(data.scatter, (d) => + d.y) * 1.05;\n            yScale\n                .range([chartHeight, 0])\n                .domain([yMin, yMax]);\n\n            // Update axes\n            xAxis.scale(xScale);\n            yAxis\n                .scale(yScale)\n                .tickFormat(yFormat);\n            ele\n                .select('.axis.x')\n                .attr('transform', 'translate(' + margin.left + ',' + (chartHeight + margin.top) + ')')\n                .transition()\n                .delay(hideXAxis != true\n                    ? duration\n                    : 0)\n                .duration(1000)\n                .style('opacity', hideXAxis == true\n                    ? 0\n                    : 1)\n                .call(xAxis);\n            ele\n                .select('.axis.y')\n                .transition()\n                .duration(1000)\n                .delay(hideYAxis != true\n                    ? duration\n                    : 0)\n                .style('opacity', hideYAxis == true\n                    ? 0\n                    : 1)\n                .call(yAxis);\n\n            // Update titles\n            ele\n                .select('.title.x')\n                .text(xTitle)\n                .attr('transform', 'translate(' + (margin.left + chartWidth / 2) + ',' + (chartHeight + margin.top + 40) + ')')\n                .transition()\n                .delay(hideXAxis != true\n                    ? duration\n                    : 0)\n                .duration(duration)\n                .style('opacity', hideXAxis == true\n                    ? 0\n                    : 1)\n            ele\n                .select('.title.y')\n                .attr('transform', 'translate(' + (margin.left - 50) + ',' + (margin.top + chartHeight / 2) + ') rotate(-90)')\n                .text(yTitle)\n                .transition()\n                .delay(hideYAxis != true\n                    ? duration\n                    : 0)\n                .duration(duration)\n                .style('opacity', hideYAxis == true\n                    ? 0\n                    : 1);\n\n            // Define data\n            if (pack === true) {\n                // Create a packing function to pack circles\n                let size = d3.min([width, height]);\n                let packer = d3\n                    .pack()\n                    .size([size, size]);\n                // Nest your data *by group* using d3.nest()\n                let nestedData = d3\n                    .nest()\n                    .key(function (d) {\n                        return d[packGroup];\n                    })\n                    .entries(data.pack);\n\n                // Define a hierarchy for your data using d3.hierarchy\n                let root = d3.hierarchy({\n                    values: nestedData\n                }, function (d) {\n                    return d.values;\n                })\n                    .sum(function (d) {\n                        return 1;\n                    });\n                // (Re)build your pack hierarchy data structure by passing your `root` to your\n                // `pack` function\n                packer(root);\n                chartData = root\n                    .descendants()\n                    .filter((d) => d.depth != 0)\n                    .map(function (d) {\n                        return {\n                            x: d.x,\n                            y: d.y,\n                            id: d.data.id,\n                            color: d.data.color,\n                            r: d.r,\n                            container: d.depth == 1\n                        }\n                    });\n                xMin = d3.min(chartData, (d) => d.x)\n                xMax = d3.max(chartData, (d) => d.x)\n                // Adjust for margins\n                let shift = margin.left;\n                let range = [\n                    xMin - shift,\n                    xMax - shift\n                ]\n                xScale\n                    .domain([xMin, xMax])\n                    .range(range)\n                yMin = d3.min(chartData, (d) => d.y)\n                yMax = d3.max(chartData, (d) => d.y)\n                yScale\n                    .domain([yMin, yMax])\n                    .range([yMin, yMax])\n                radius = (d) => d.r\n            } else if (xSwarm === true) {\n                let tmp = data.swarm.map((d) => d);\n                let simulation = d3.forceSimulation(tmp)\n                    .force(\"x\", d3.forceX(function (d) { return xScale(d.x); }).strength(1))\n                    .force(\"y\", d3.forceY(height / 2))\n                    .force(\"collide\", d3.forceCollide(8))\n                    .stop();\n\n                for (var i = 0; i < 50; ++i) simulation.tick();\n                chartData = tmp.map((d) => {\n                    return {\n                        id: d.id,\n                        x: xScale.invert(d.x),\n                        y: yScale.invert(d.y),\n                        color: d.color\n                    }\n                });\n            }\n            else {\n                chartData = data.scatter.map((d) => {\n                    return {\n                        x: d.x,\n                        y: d.y,\n                        color: d.color,\n                        id: d.id\n                    }\n                })\n            }\n\n            // Draw markers\n            let circles = ele\n                .select('.chartG')\n                .selectAll('circle')\n                .data(chartData, function (d) {\n                    return d.id\n                })\n            // Use the .enter() method to get entering elements, and assign initial position\n            circles\n                .enter()\n                .append('circle')\n                .attr('cx', (d) => xScale(d.x))\n                .attr('cy', (d) => yScale(d.y))\n                .attr('r', (d) => radius(d))\n                .style('fill', function (d) {\n                    return d.container == true\n                        ? 'none'\n                        : colorScale(d.color)\n                })\n                .merge(circles)\n                .style('opacity', (d) => showCircles === true ? .4 : 0)\n                .transition()\n                .duration(1500)\n                .delay(delay)\n                .style('stroke', (d) => d.container == true\n                    ? 'black'\n                    : 'none')\n                .style('fill', function (d) {\n                    return d.container == true\n                        ? 'none'\n                        : colorScale(d.color)\n                })\n                .attr('cx', (d) => xScale(d.x))\n                .attr('cy', (d) => yScale(d.y))\n                .attr('r', (d) => radius(d));\n\n\n\n            // Use the .exit() and .remove() methods to remove elements that are no longer\n            // in the data\n            circles\n                .exit()\n                .transition()\n                .duration(500)\n                .style(\"opacity\", 0)\n                .remove();\n\n\n            // Add rectangle background shading\n            let rectData = showThreshold == false ? [] : [\n                { \"x\": 0, \"y\": yScale(data.horizontalLine), \"width\": xScale.range()[1], \"height\": yScale.range()[0] - yScale(data.horizontalLine) },\n                { \"x\": 0, \"y\": 0, \"width\": xScale.range()[1], \"height\": yScale(data.horizontalLine) }\n            ]\n            let rects = ele\n                .select('.chartG')\n                .selectAll('rect')\n                .data(rectData)\n\n            rects.enter().append(\"rect\")\n                .style(\"opacity\", 0)// attach a line\n                .merge(rects)\n                .style(\"stroke\", \"black\")  // colour the line\n                .attr(\"x\", (d) => d.x)     // x position of the first end of the line\n                .attr(\"y\", (d) => d.y)      // y position of the first end of the line\n                .attr(\"width\", (d) => d.width)\n                .attr(\"height\", (d) => d.height)\n                .style(\"fill\", (d, i) => i === 0 ? \"blue\" : \"red\")\n                .transition().duration(1000)\n                .style(\"opacity\", .2)\n\n            rects.exit().transition().duration(1000)\n                .style(\"opacity\", 0).remove().remove()\n\n            // Adding a vertical line\n            let lineData = showThreshold == false ? [] : [\"line\"];\n            let line = ele\n                .select('.chartG')\n                .selectAll('line')\n                .data(lineData)\n\n            line.enter().append(\"line\")\n                .style(\"opacity\", 0) // attach a line\n                .merge(line)\n\n                .style(\"cursor\", \"pointer\")\n                .style(\"stroke\", \"black\")  // colour the line\n                .attr(\"x1\", 0)     // x position of the first end of the line\n                .attr(\"y1\", yScale(data.horizontalLine))      // y position of the first end of the line\n                .attr(\"x2\", xScale.range()[1])     // x position of the second end of the line\n                .attr(\"y2\", yScale(data.horizontalLine))\n                .style(\"stroke-width\", \"5\")\n                .call(d3.drag()\n                    .on(\"start\", dragstarted)\n                    .on(\"drag\", dragged)\n                    .on(\"end\", dragended))\n                .transition().duration(1000)\n                .style(\"opacity\", 1)\n\n            line.exit().transition().duration(1000)\n                .style(\"opacity\", 0).remove()\n\n\n\n            // Path drawing function\n            let path = d3.line()\n                .x(d => xScale(d.x))\n                .y(d => yScale(d.y))\n\n            // Add paths\n            let pathData = showPath === true ? chartData.sort((a, b) => a.x - b.x) : ''\n            let paths = ele\n                .select('.chartG')\n                .selectAll('path.custom')\n                .data([pathData])\n\n            paths.enter().append(\"path\")\n                .attr(\"class\", \"custom\")\n                .style(\"opacity\", 0) // attach a line\n                .merge(paths)\n                .style(\"cursor\", \"pointer\")\n                .style(\"stroke\", \"black\")  // colour the line\n                .attr(\"d\", path)\n                .style(\"fill\", \"none\")\n                .style(\"stroke-width\", \"2\")\n                .transition().duration(1000)\n                .style(\"opacity\", showPath === true ? 1 : 0);\n\n            paths.exit().remove()\n\n\n        });\n    };\n\n    // Getter/setter methods to change locally scoped options\n    chart.height = function (value) {\n        if (!arguments.length)\n            return height;\n        height = value;\n        return chart;\n    };\n\n    chart.width = function (value) {\n        if (!arguments.length)\n            return width;\n        width = value;\n        return chart;\n    };\n\n    chart.colorScale = function (value) {\n        if (!arguments.length)\n            return colorScale;\n        colorScale = value;\n        return chart;\n    };\n\n    chart.xTitle = function (value) {\n        if (!arguments.length)\n            return xTitle;\n        xTitle = value;\n        return chart;\n    };\n\n    chart.yTitle = function (value) {\n        if (!arguments.length)\n            return yTitle;\n        yTitle = value;\n        return chart;\n    };\n    chart.radius = function (value) {\n        if (!arguments.length)\n            return radius;\n        radius = value;\n        return chart;\n    }\n    chart.pack = function (value) {\n        if (!arguments.length)\n            return pack;\n        pack = value;\n        return chart;\n    }\n    chart.packValue = function (value) {\n        if (!arguments.length)\n            return packValue;\n        packValue = value;\n        return chart;\n    }\n    chart.packGroup = function (value) {\n        if (!arguments.length)\n            return packGroup;\n        packGroup = value;\n        return chart;\n    }\n    chart.delay = function (value) {\n        if (!arguments.length)\n            return delay;\n        delay = value;\n        return chart;\n    };\n    chart.margin = function (value) {\n        if (!arguments.length)\n            return margin;\n        margin = value;\n        return chart;\n    };\n\n    chart.xSwarm = function (value) {\n        if (!arguments.length)\n            return xSwarm;\n        xSwarm = value;\n        return chart;\n    };\n\n    chart.hideYAxis = function (value) {\n        if (!arguments.length)\n            return hideYAxis;\n        hideYAxis = value;\n        return chart;\n    };\n\n    chart.hideXAxis = function (value) {\n        if (!arguments.length)\n            return hideXAxis;\n        hideXAxis = value;\n        return chart;\n    };\n    chart.onDrag = function (value) {\n        if (!arguments.length)\n            return onDrag;\n        onDrag = value;\n        return chart;\n    };\n    chart.fixedXMin = function (value) {\n        if (!arguments.length)\n            return fixedXMin;\n        fixedXMin = value;\n        return chart;\n    };\n    chart.fixedXMax = function (value) {\n        if (!arguments.length)\n            return fixedXMax;\n        fixedXMax = value;\n        return chart;\n    };\n    chart.fixedYMin = function (value) {\n        if (!arguments.length)\n            return fixedYMin;\n        fixedYMin = value;\n        return chart;\n    };\n    chart.fixedYMax = function (value) {\n        if (!arguments.length)\n            return fixedYMax;\n        fixedYMax = value;\n        return chart;\n    };\n    chart.showThreshold = function (value) {\n        if (!arguments.length)\n            return showThreshold;\n        showThreshold = value;\n        return chart;\n    };\n    chart.showCircles = function (value) {\n        if (!arguments.length)\n            return showCircles;\n        showCircles = value;\n        return chart;\n    };\n    chart.showPath = function (value) {\n        if (!arguments.length)\n            return showPath;\n        showPath = value;\n        return chart;\n    };\n    return chart;\n};\n\nexport default ScatterPlot;\n","// Scatterplot\nimport React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport './ScatterPlot.css';\nimport ScatterPlot from './ScatterPlot';\n\n// Scatterplot component\nclass ScatterPlotComponent extends Component {\n    componentDidMount() {\n        // Define scatterplot function\n        this.scatter = ScatterPlot();\n        this.update();\n    }\n\n    // Create chart\n    update() {\n        let scatterData = JSON.parse(JSON.stringify(this.props.data));\n        let swarmData = this.props.data.map((d) => {\n            return {\n                x: d.x,\n                y: d.y,\n                id: d.id,\n                color: d.color\n            }\n        })\n        // Set margin\n        let margin = {};\n        if (this.props.settings.pack == true) {\n            margin = {\n                left: 0,\n                bottom: 0,\n                top: 0,\n                right: 0\n            };\n        } else if (this.props.hideXAxix == true) {\n            margin = {\n                left: 0,\n                bottom: 0,\n                top: 0,\n                right: 0\n            };\n        } else {\n            margin = {\n                left: 70,\n                bottom: 50,\n                top: 0,\n                right: 50\n            }\n        }\n        // Update parameters\n        console.log(this.props.showCircles)\n        this\n            .scatter\n            .width(this.props.width)\n            .height(this.props.height)\n            .colorScale(this.props.colorScale)\n            .delay(this.props.delay)\n            .xTitle(this.props.xTitle)\n            .yTitle(this.props.yTitle)\n            .radius(this.props.radius)\n            .showThreshold(this.props.settings.showThreshold)\n            .pack(this.props.settings.pack)\n            .packValue('y')\n            .xSwarm(this.props.settings.xSwarm)\n            .hideXAxis(this.props.settings.hideXAxis)\n            .hideYAxis(this.props.settings.hideYAxis)\n            .packGroup('color')\n            .onDrag(this.props.update)\n            .fixedXMin(this.props.axisLimits.xMin)\n            .fixedYMin(this.props.axisLimits.yMin)\n            .fixedXMax(this.props.axisLimits.xMax)\n            .showCircles(this.props.showCircles)\n            .showPath(this.props.showPath)\n            .fixedYMax(this.props.axisLimits.yMax);\n\n        // .margin(margin) Call d3 update\n        d3\n            .select(this.root)\n            .datum({ scatter: scatterData, pack: this.props.data.slice(0), swarm: swarmData, horizontalLine: this.props.threshold })\n            .call(this.scatter);\n    }\n    // Update on new props\n    componentWillReceiveProps(props) {\n        this.props = props;\n        this.update();\n    }\n\n    render() {\n        // Expose HTML node via ref property\n        return (<div\n            className=\"chart\"\n            style={{\n                marginLeft: this.props.marginLeft\n            }}\n            width={this.props.width}\n            height={this.props.height}\n            ref={(node) => {\n                this.root = node;\n            }} />);\n    }\n};\n\nScatterPlotComponent.defaultProps = {\n    width: window.innerWidth * .6,\n    height: window.innerHeight * .8,\n    xTitle: 'X Title',\n    colorScale: (d) => 'blue',\n    yTitle: 'Y Title',\n    title: 'Title',\n    delay: (d) => 0,\n    hideXAxis: false,\n    hideYAxis: false,\n    radius: (d) => d.selected == true\n        ? 6\n        : 10,\n    fill: (d) => 'blue',\n    settings: {\n        pack: false\n    },\n    data: [\n        {\n            x: 10,\n            y: 1000,\n            id: \"a\"\n        }, {\n            x: 10,\n            y: 1000,\n            id: \"b\"\n        }, {\n            x: 5,\n            y: 1200,\n            id: \"c\"\n        }\n    ],\n    lineData: []\n}\n\nexport default ScatterPlotComponent;\n","// Sections\nimport React, { Component } from 'react';\nimport { Tex } from 'react-tex';\nimport './Sections.css';\n\n// Written Sections\nclass Sections extends Component {\n    constructor(props) {\n        super(props)\n    }\n    render() {\n        let threshold = this.props.threshold.toFixed(2)\n        let ele = null;\n        switch (this.props.sectionNumber) {\n            case 0:\n                ele = <div>\n                    <h1 id=\"intro\">Binary Predictions Metrics</h1>\n                    <p>This visual explanation introduces the metrics of model fit used when predicting of&nbsp;\n            <strong>binary outcomes</strong>. It uses the challenge of classifying tumors as <span style={{\n                            color: 'rgba(0, 0, 255, .5)'\n                        }}>benign</span> or <span style={{\n                            color: 'rgba(255, 0, 0, .5)'\n                        }}>malignant</span> to explore the importance of these metrics.</p>\n                </div>\n                break;\n            case 1:\n                ele = <div>\n                    <h1>Cancer Data</h1>\n                    <p>A common analytical challenge is classifying an observation as a member of a group. As we walk through this explanation, we'll consider this example</p>\n                    <blockquote>Can you use image data to classify tumors as <span style={{\n                        color: 'rgba(0, 0, 255, .5)'\n                    }}>benign</span> or <span style={{\n                        color: 'rgba(255, 0, 0, .5)'\n                    }}>malignant</span>?</blockquote>\n                    <p>We'll use the <a target=\"_blank\" href=\"https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/wdbc.names\">Wisconsin Breast Cancer dataset</a> as a driving example.</p>\n                </div >\n                break;\n            case 2:\n                ele = <div>\n                    <h1>Modeling the data</h1>\n                    <p>The dataset provided has 29 different attributes of each tumor. For simplicity's sake, we'll only use the one that is more correlated with the severity of the tumor.</p>\n\n                    <p>\n                        The feature most related to the outcome of interest is the <strong>maximum concavity</strong> of each tumor. As you can see, there is clearly an association between a higher maximum concavity and the tumor's malignancy.\n                    </p>\n                </div>\n                break;\n            case 3:\n                ele = <div>\n                    <h1>Logistic Predictions</h1>\n                    <p>There are a variety of statistical and machine learning techniques one could use to predict a binary outcome, though a popular one is the <strong>logistic regression</strong> (more on that another time).</p>\n                    <p>\n                        Here, we can model the <strong>probability of malignancy</strong> using only the maximum concavity of the tumor.\n                    </p>\n                </div>\n                break;\n            case 4:\n                ele = <div>\n                    <h1>Thresholds</h1>\n                    <p>The logistic regression allows us to model the <em>probability</em> of our outcome. If we want to convert these probabilities to binary outcomes (e.g., 0 or 1, benign or malignant), we'll need to pick a <strong>threshold</strong></p>\n                    <p>Drag the center line to adjust the threshold:</p>\n                    <h3>Threshold: {threshold}</h3>\n                </div>\n                break;\n            case 5:\n                ele = <div>\n                    <h1>Accuracy</h1>\n                    <p>The most direct way that we can assess the fit of the model is using the model's <strong>accuracy</strong>. To compute this, we check the percentage of the time that the predicted class (benign, malignant) matches the data.</p>\n                    <div>\n                        <Tex texContent=\"\\displaystyle{Accuracy = \\frac{Correct Predictions}{Total Cases}}\" />\n                    </div>\n                    <p>More formally, we could express this as:</p>\n                    <div>\n                        <Tex texContent=\"\\displaystyle{Accuracy = \\sum_{n = i}^{N}{\\frac{1 - |\\hat{y_i} - y_i|}N}{}}\" />\n                    </div>\n                    <p>Drag the center line see the accuracy of the model using different thresholds:</p>\n                    <h3>Accuracy: {this.props.accuracy}%.</h3>\n\n                </div>\n                break;\n            case 6:\n                ele = <div>\n                    <h1>Vocabulary</h1>\n                    <p>In order to understand different metrics of success, it's important to understand the conventional vocabulary. <strong>Hover</strong> over any description to identify relevant points on the plot.</p>\n                    <div>\n\n                        <p className=\"hover\" onMouseEnter={() => this.props.update(\"true_positives\")} onMouseLeave={() => this.props.update(\"all\")} ><strong>True Positives (TP)</strong>: The model <em>predicts</em> a case (and the case <em>is true</em> in the data)</p>\n                        <p className=\"hover\" onMouseEnter={() => this.props.update(\"false_positives\")} onMouseLeave={() => this.props.update(\"all\")} ><strong>False Positives (FP)</strong>: The model <em>predicts</em> a case (and the case <em>is not</em> true in the data)</p>\n                        <p className=\"hover\" onMouseEnter={() => this.props.update(\"true_negatives\")} onMouseLeave={() => this.props.update(\"all\")} ><strong>True Negatives (TN)</strong>: The model <em>does not</em> predict a case (and the case <em>is not</em> true in the data)</p>\n                        <p className=\"hover\" onMouseEnter={() => this.props.update(\"false_negatives\")} onMouseLeave={() => this.props.update(\"all\")} ><strong>False Negatives (FN)</strong>: The model <em>does not</em> predict a case (and the case <em>is true</em> in the data)</p>\n\n                    </div>\n                </div >\n                break;\n            case 7:\n                ele = <div>\n                    <h1>Sensitivity</h1>\n                    <p>Another consideration we could make is how well our model identifies <strong>positive cases</strong>. This metric, called the sensitivity, is calculated as:</p>\n                    <div>\n                        <Tex texContent=\"\\displaystyle{Sensitivity = \\frac{Correct Pos Predictions}{All Pos Cases}}\" />\n                    </div>\n                    <p>This is often expressed using the vocabulary provided:</p>\n                    <div>\n                        <Tex texContent=\"\\displaystyle{Sensitivity = \\frac{TP}{TP + FN}}\" />\n                    </div>\n                    <p>Drag the center line see the sensitivity of the model using different thresholds:</p>\n                    <h3>Sensitivity: {this.props.sensitivity}%.</h3>\n                </div>\n                break;\n            case 8:\n                ele = <div>\n                    <h1>Specificity</h1>\n                    <p>Conversely, we could consider how well our model identifies <strong>negative cases</strong>. This metric, called the specificity, is calculated as:</p>\n                    <div>\n                        <Tex texContent=\"\\displaystyle{Specificity = \\frac{Correct Neg Predictions}{All Neg Cases}}\" />\n                    </div>\n                    <p>This is often expressed using these conventional terms:</p>\n                    <div>\n                        <Tex texContent=\"\\displaystyle{Specificity = \\frac{TN}{TN + FP}}\" />\n                    </div>\n                    <p>Drag the center line see the sensitivity of the model using different thresholds:</p>\n                    <h3>Sensitivity: {this.props.sensitivity}%.</h3>\n                    <h3>Specificity: {this.props.specificity}%.</h3>\n\n                </div>\n                break;\n            case 9:\n                ele = <div>\n                    <h1>ROC Curve</h1>\n                    <p>This trade off between specificity and sensitivity is often displayed using a Receiver Operator Characteristic (ROC) Curve, which displays the following:</p>\n                    <p><strong>Sensitivity:</strong> Along the x-axis, the sensitivity (also called the <em>true positive rate</em>.</p>\n                    <p><strong>Specificity:</strong> Along the y-axis, the specificity (also called the <em>true negative rate</em></p>\n                </div>\n                break;\n\n            case 10:\n                ele = <div>\n                    <h1>About</h1>\n                    <p>This project was built by&nbsp;\n            <a href=\"http://mfviz.com/\" target=\"_blank\">Michael Freeman</a>, a faculty member at the University of Washington&nbsp;<a href=\"https://ischool.uw.edu/\" target=\"_blank\">\n                            Information School</a>.\n                        <p>If you like this explanation, check out explanations of writing code to work with data in my <a href=\"https://www.amazon.com/gp/product/0135133106\" target=\"_blank\">new book!</a></p>\n                    </p>\n                    <p>\n                        All code for this project is&nbsp;\n            <a href=\"https://github.com/mkfreeman/binary-predictions/\" target=\"_blank\">on GitHub</a>, including the script to create the data and run regressions (done in\n            <code>Python</code>). Feel free to issue a pull request for improvements, and if you\nlike it, share it on&nbsp;\n            <a\n                            href=\"http://twitter.com/home?status=Check out a Visual Explanation of Binary Predictions Metrics by @mf_viz. http://mfviz.com/binary-predictions\"\n                            target=\"_blank\">Twitter</a>. Layout inspired by&nbsp;\n            <a href=\"https://twitter.com/tonyhschu\" target=\"_blank\">Tony Chu</a>.\n          </p>\n                </div>\n                break;\n            default:\n                ele = '';\n        }\n        return <div className=\"Sections\" style={this.props.styles}>\n            {ele}\n        </div>;\n    }\n}\nexport default Sections;","\"use strict\";\nimport './App.css';\nimport ScatterPlotComponent from './ScatterPlotComponent';\nimport * as d3 from 'd3';\nimport Sections from './Sections';\n\nvar ReactGA = require('react-ga');\nvar FontAwesome = require('react-fontawesome');\nfunction logPageView() {\n    ReactGA.set({\n        page: window.location.pathname + window.location.search\n    });\n    ReactGA.pageview(window.location.pathname + window.location.search);\n}\nvar React = require('react');\nvar Scroll = require('react-scroll');\n\n// Scrolling variables\nvar Link = Scroll.Link;\nvar DirectLink = Scroll.DirectLink;\nvar Element = Scroll.Element;\nvar Events = Scroll.Events;\nvar scroll = Scroll.animateScroll;\nvar scrollSpy = Scroll.scrollSpy;\nvar scroller = Scroll.scroller;\n\nvar durationFn = function (deltaTop) {\n    return deltaTop;\n};\n\n// List of elements\nconst elementList = [\n    {\n        id: 'intro',\n        name: \"Introduction\"\n    }, {\n        id: 'nested-data',\n        name: \"Data\"\n    }, {\n        id: 'modeling',\n        name: \"Modeling\"\n    },\n    {\n        id: \"logistic-preds\",\n        name: 'Predictions'\n    },\n    {\n        id: \"threshold\",\n        name: 'Thresholds'\n    },\n    {\n        id: \"accuracy\",\n        name: 'Accuracy'\n    },\n    {\n        id: \"vocab\",\n        name: 'Vocab'\n    },\n    {\n        id: \"sensitivity\",\n        name: 'Sensitivity'\n    },\n    {\n        id: \"specificity\",\n        name: 'Specificity'\n    },\n    {\n        id: \"roc\",\n        name: 'ROC'\n    },\n    {\n        id: 'about',\n        name: \"About\"\n    }\n];\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.updateThreshold = this.updateThreshold.bind(this);\n        this.setFilter = this.setFilter.bind(this);\n        this.state = {\n            dataStep: 0,\n            threshold: .5,\n            allData: [],\n            width: 0,\n            typeFilter: \"all\",\n            height: 0,\n            allLineData: [],\n            scatterSettings: [\n                {\n                    pack: false,\n                    hideXAxis: true,\n                    hideYAxis: true,\n                    xSwarm: false,\n                    showThreshold: false\n                }, {\n                    pack: true,\n                    hideXAxis: true,\n                    hideYAxis: true,\n                    xSwarm: false,\n                    showThreshold: false\n                }, {\n                    pack: false,\n                    xSwarm: true,\n                    hideXAxis: false,\n                    hideYAxis: true,\n                    showThreshold: false\n                },\n                {\n                    pack: false,\n                    hideXAxis: false,\n                    hideYAxis: false,\n                    xSwarm: false,\n                    showThreshold: false\n                },\n                {\n                    pack: false,\n                    hideXAxis: false,\n                    hideYAxis: false,\n                    xSwarm: false,\n                    showThreshold: true\n                },\n                {\n                    pack: false,\n                    hideXAxis: false,\n                    hideYAxis: false,\n                    xSwarm: false,\n                    showThreshold: true\n                },\n                {\n                    pack: false,\n                    hideXAxis: false,\n                    hideYAxis: false,\n                    xSwarm: false,\n                    showThreshold: true\n                },\n                {\n                    pack: false,\n                    hideXAxis: false,\n                    hideYAxis: false,\n                    xSwarm: false,\n                    showThreshold: true\n                },\n                {\n                    pack: false,\n                    hideXAxis: false,\n                    hideYAxis: false,\n                    xSwarm: false,\n                    showThreshold: true\n                },\n                {\n                    pack: false,\n                    hideXAxis: false,\n                    hideYAxis: false,\n                    xSwarm: false,\n                    showThreshold: false\n                },\n                {\n                    pack: false,\n                    hideXAxis: true,\n                    hideYAxis: true,\n                    xSwarm: false,\n                    showThreshold: false\n                }\n            ]\n        }\n    }\n\n    componentDidMount() {\n        // Google analytics\n        ReactGA.initialize('UA-49431863-8');\n        logPageView();\n\n        // Page title\n        document.title = \"Binary Prediction Metrics\";\n        Events\n            .scrollEvent\n            .register('begin', function () { });\n\n        Events\n            .scrollEvent\n            .register('end', function () { });\n\n        // Listen for resize\n        window.addEventListener(\"resize\", this.onResize());\n\n        scrollSpy.update();\n        d3.csv('data/cancer_data.csv', function (error, data) {\n\n            // Format plot data\n            let formatted = data.map(function (d, i) {\n                return { id: i, x: +d.worst_concave_points, y: +d.logistic_preds, color: d.outcome }\n            })\n\n            // Random data to display at start / end\n            let random = data.map(function (d, i) {\n                return {\n                    id: i,\n                    x: +Math.random() / 3.4,\n                    y: +Math.random(),\n                    color: d.outcome\n                }\n            });\n\n            // Screen dimensions\n            let dims = this.getDimensions();\n\n            // Set the state\n            this.setState({\n                rawData: data,\n                randomData: random,\n                formattedData: formatted,\n                width: dims.width,\n                height: dims.height\n            });\n        }.bind(this))\n\n        d3.csv('data/roc_data.csv', function (error, data) {\n            // Format plot data\n            let formatted = data.map(function (d, i) {\n                return { id: i, x: +d.fpr, y: +d.tpr }\n            });\n\n            this.setState({\n                rocData: formatted\n            });\n        }.bind(this));\n    }\n\n    // Update the threshold\n    updateThreshold(d) {\n        this.setState({ threshold: d })\n    }\n\n    // Compute accuracy\n    computeAccuracy() {\n        let data = this.state.rawData || [];\n        let preds = data.reduce((total, d) => {\n            let guess = +d.logistic_preds > this.state.threshold ? 1 : 0;\n            let add = guess === +d.outcome ? 1 : 0;\n            return add + total;\n        }, 0);\n        return (preds / data.length * 100).toFixed(1);\n    }\n    computeSensitivity() {\n        let data = this.state.rawData || [];\n        let posCases = data.filter((d) => +d.outcome === 1);\n        let preds = posCases.reduce((total, d) => {\n            let guess = +d.logistic_preds > this.state.threshold ? 1 : 0;\n            let add = guess === +d.outcome ? 1 : 0;\n            return add + total;\n        }, 0);\n        return (preds / posCases.length * 100).toFixed(1);\n    }\n    computeSpecificity() {\n        let data = this.state.rawData || [];\n        let negCases = data.filter((d) => +d.outcome === 0);\n        let preds = negCases.reduce((total, d) => {\n            let guess = +d.logistic_preds > this.state.threshold ? 1 : 0;\n            let add = guess === +d.outcome ? 1 : 0;\n            return add + total;\n        }, 0);\n        return (preds / negCases.length * 100).toFixed(1);\n    }\n    // Get dimensions\n    getDimensions() {\n        let wrapper = document.getElementById('main-wrapper');\n        let fullWidth = wrapper == null\n            ? 0\n            : wrapper.offsetWidth;\n        let fraction = window.innerWidth < 960\n            ? .55\n            : .75;\n        let width = fullWidth * fraction;\n        let height = wrapper == null\n            ? 0\n            : window.innerHeight - 140;\n\n        let sectionWidth = fullWidth * (.97 - fraction);\n        return { fullWidth: fullWidth, width: width, height: height, sectionWidth: sectionWidth };\n    }\n\n    // Resize\n    updateDimensions() {\n        let dims = this.getDimensions();\n        this.setState({ width: dims.width, height: dims.height })\n    }\n\n    onResize = () => this\n        .updateDimensions\n        .bind(this);\n\n    componentWillUnmount() {\n        Events\n            .scrollEvent\n            .remove('begin');\n        Events\n            .scrollEvent\n            .remove('end');\n\n        // Resize event\n        window.removeEventListener(\"resize\", this.onResize);\n\n    }\n    handleSetActive(to) {\n        let dataStep = 0;\n        switch (to) {\n            case ('intro'):\n                dataStep = 0\n                break;\n            case ('nested-data'):\n                dataStep = 1\n                break;\n            case ('modeling'):\n                dataStep = 2\n                break;\n            case ('logistic-preds'):\n                dataStep = 3\n                break;\n            case ('threshold'):\n                dataStep = 4\n                break;\n            case ('accuracy'):\n                dataStep = 5\n                break;\n            case ('vocab'):\n                dataStep = 6\n                break;\n            case ('sensitivity'):\n                dataStep = 7\n                break;\n            case ('specificity'):\n                dataStep = 8;\n                break;\n            case ('roc'):\n                dataStep = 9;\n                break;\n            case ('about'):\n                dataStep = 10;\n                break;\n        }\n        this.setState({ dataStep: dataStep })\n    }\n    getData() {\n        let data = [];\n        if (!this.state.formattedData) return data;\n        if (this.state.dataStep === 0 || this.state.dataStep === elementList.length - 1) {\n            return this.state.randomData\n        }\n        else if (this.state.dataStep === elementList.length - 2) {\n            console.log(\"ROC!\")\n            return this.state.rocData;\n        }\n        else {\n            switch (this.state.typeFilter) {\n                case (\"true_positives\"):\n                    data = this.state.formattedData.filter((d) => +d.color === 1 && +d.y > this.state.threshold)\n                    break;\n                case (\"false_positives\"):\n                    data = this.state.formattedData.filter((d) => +d.color === 0 && +d.y > this.state.threshold)\n                    break;\n                case (\"true_negatives\"):\n                    data = this.state.formattedData.filter((d) => +d.color === 0 && +d.y < this.state.threshold)\n                    break;\n                case (\"false_negatives\"):\n                    data = this.state.formattedData.filter((d) => +d.color === 1 && +d.y < this.state.threshold)\n                    break;\n                default:\n                    data = this.state.formattedData;\n                    break;\n            }\n            return (data)\n        }\n    }\n    setFilter(filter) {\n        this.setState({ typeFilter: filter });\n    }\n    getXTitle() {\n        return this.state.dataStep === 9 ? \"Sensitivity\" : \"Maximum Tumor Concavity\"\n    }\n    getYTitle() {\n        return this.state.dataStep === 9 ? \"Specificity\" : \"Probability of Malignancy\"\n    }\n    getAxisLimits() {\n        let limits = {\n            xMin: -.01,\n            xMax: 1,\n            yMin: -.09,\n            yMax: 1.09\n        }\n        let altLimits = {\n            xMin: -.01,\n            xMax: .3,\n            yMin: -.09,\n            yMax: 1.09\n        }\n        return this.state.dataStep === 9 ? limits : altLimits;\n    }\n\n    getCircleVisibility() {\n        return this.state.dataStep === 9 ? false : true;\n    }\n    getPathVisibility() {\n        return this.state.dataStep === 9 ? true : false;\n    }\n    render() {\n        this.computeAccuracy()\n        let colorScale = d3\n            .scaleOrdinal()\n            .domain([1, 0])\n            .range([\"red\", \"blue\"]);\n        let chartData = this.getData();\n        // let lineData = this.state.allLineData[this.state.dataStep];\n        let scatterSettings = this.state.scatterSettings[this.state.dataStep];\n        let nextIndex = this.state.dataStep == elementList.length - 1\n            ? 0\n            : this.state.dataStep + 1\n        let scrollNext = () => scroller.scrollTo(elementList[nextIndex].id, {\n            duration: 1500,\n            delay: 100,\n            smooth: true,\n            offset: nextIndex == 0\n                ? 0\n                : 50\n        })\n        let scrollLast = () => scroller.scrollTo(elementList[this.state.dataStep - 1].id, {\n            duration: 1500,\n            delay: 100,\n            smooth: true,\n            offset: nextIndex == 0\n                ? 0\n                : 50\n        })\n        let icon = nextIndex == 0\n            ? \"chevron-up\"\n            : \"chevron-down\"\n\n        let dims = this.getDimensions();\n        let sectionStyle = {\n            width: dims.sectionWidth\n        }\n        return (\n            <div>\n                <div className=\"container\">\n                    <nav className=\"navbar navbar-default navbar-fixed-top\">\n                        <div className=\"container\">\n                            <div className=\"menu-large\">\n                                <ul className=\"nav navbar-nav\">\n                                    {elementList\n                                        .map(function (d, i) {\n                                            let offset = d.id == \"intro\"\n                                                ? 0\n                                                : 50;\n                                            return <li key={'link-' + i}>\n                                                <Link\n                                                    activeClass=\"active\"\n                                                    onSetActive={this\n                                                        .handleSetActive\n                                                        .bind(this)}\n                                                    className={d.id}\n                                                    offset={offset}\n                                                    to={d.id}\n                                                    spy={true}\n                                                    smooth={true}\n                                                    duration={500}\n                                                >\n                                                    {d.name}\n                                                </Link>\n                                            </li>\n                                        }.bind(this))}\n                                </ul>\n                            </div>\n                            <div className=\"small-menu\">\n                                <FontAwesome\n                                    id=\"last-step\"\n                                    name=\"chevron-left\"\n                                    size=\"3x\"\n                                    onClick={scrollLast}\n                                    className={this.state.dataStep == 0\n                                        ? 'inactive-scroll'\n                                        : 'active-scroll'} />\n                                {elementList.filter((d, i) => i == this.state.dataStep)\n                                    .map(function (d, i) {\n                                        let offset = d.id == \"intro\"\n                                            ? 0\n                                            : 50;\n                                        return <span key={'step-label-' + i} className=\"step-label\">{d.name}</span>\n                                    }.bind(this))\n                                }\n                                <FontAwesome\n                                    className={this.state.dataStep == elementList.length - 1\n                                        ? 'inactive-scroll'\n                                        : 'active-scroll'}\n                                    id=\"next-step\"\n                                    name=\"chevron-right\"\n                                    size=\"3x\"\n                                    onClick={scrollNext} />\n                            </div>\n                        </div>\n                    </nav>\n                </div>\n                <div id=\"main-wrapper\" className=\"container\">\n                    <ScatterPlotComponent\n                        settings={scatterSettings}\n                        colorScale={colorScale}\n                        data={chartData}\n                        axisLimits={this.getAxisLimits()}\n                        width={this.state.width}\n                        height={this.state.height}\n                        marginLeft={dims.fullWidth - dims.width}\n                        update={this.updateThreshold}\n                        threshold={this.state.threshold}\n                        xTitle={this.getXTitle()}\n                        showCircles={this.getCircleVisibility()}\n                        showPath={this.getPathVisibility()}\n                        yTitle={this.getYTitle()} />\n                    {elementList\n                        .map(function (d, i) {\n                            return <Element key={'ele-' + i} name={d.id} className=\"element\">\n                                <Sections\n                                    sectionNumber={i}\n                                    styles={sectionStyle}\n                                    threshold={this.state.threshold}\n                                    accuracy={this.computeAccuracy()}\n                                    sensitivity={this.computeSensitivity()}\n                                    specificity={this.computeSpecificity()}\n                                    update={this.setFilter}\n                                />\n                            </Element>\n                        }.bind(this))}\n                    <div id=\"scroll-wrapper\">\n                        <FontAwesome id=\"scroll-down\" name={icon} size=\"3x\" onClick={scrollNext} />\n                    </div>\n                </div>\n                <footer>\n                    <div className=\"footer-copyright\">\n                        <div className=\"container\">\n                            © 2017 Copyright\n                            <a href=\"http://mfviz.com/\" target=\"_blank\">&nbsp;Michael Freeman</a>\n                            <a className=\"right\" target=\"_blank\" href=\"http://twitter.com/mf_viz\">@mf_viz</a>\n                        </div>\n                    </div>\n                </footer>\n            </div>\n        );\n    }\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}